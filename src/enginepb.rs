// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CommandRequetHeader {
    // message fields
    pub region_id: u64,
    pub sync_log: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandRequetHeader {
    pub fn new() -> CommandRequetHeader {
        ::std::default::Default::default()
    }

    // uint64 region_id = 1;

    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }

    // bool sync_log = 2;

    pub fn clear_sync_log(&mut self) {
        self.sync_log = false;
    }

    // Param is passed by value, moved
    pub fn set_sync_log(&mut self, v: bool) {
        self.sync_log = v;
    }

    pub fn get_sync_log(&self) -> bool {
        self.sync_log
    }
}

impl ::protobuf::Message for CommandRequetHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.sync_log = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sync_log != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.region_id != 0 {
            os.write_uint64(1, self.region_id)?;
        }
        if self.sync_log != false {
            os.write_bool(2, self.sync_log)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandRequetHeader {
        CommandRequetHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "region_id",
                    |m: &CommandRequetHeader| { &m.region_id },
                    |m: &mut CommandRequetHeader| { &mut m.region_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "sync_log",
                    |m: &CommandRequetHeader| { &m.sync_log },
                    |m: &mut CommandRequetHeader| { &mut m.sync_log },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandRequetHeader>(
                    "CommandRequetHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandRequetHeader {
        static mut instance: ::protobuf::lazy::Lazy<CommandRequetHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandRequetHeader,
        };
        unsafe {
            instance.get(CommandRequetHeader::new)
        }
    }
}

impl ::protobuf::Clear for CommandRequetHeader {
    fn clear(&mut self) {
        self.clear_region_id();
        self.clear_sync_log();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommandRequetHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandRequetHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandRequet {
    // message fields
    pub header: ::protobuf::SingularPtrField<CommandRequetHeader>,
    pub requests: ::protobuf::RepeatedField<super::raft_cmdpb::Request>,
    pub admin_request: ::protobuf::SingularPtrField<super::raft_cmdpb::AdminRequest>,
    pub admin_response: ::protobuf::SingularPtrField<super::raft_cmdpb::AdminResponse>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandRequet {
    pub fn new() -> CommandRequet {
        ::std::default::Default::default()
    }

    // .enginepb.CommandRequetHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: CommandRequetHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut CommandRequetHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> CommandRequetHeader {
        self.header.take().unwrap_or_else(|| CommandRequetHeader::new())
    }

    pub fn get_header(&self) -> &CommandRequetHeader {
        self.header.as_ref().unwrap_or_else(|| CommandRequetHeader::default_instance())
    }

    // repeated .raft_cmdpb.Request requests = 2;

    pub fn clear_requests(&mut self) {
        self.requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: ::protobuf::RepeatedField<super::raft_cmdpb::Request>) {
        self.requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requests(&mut self) -> &mut ::protobuf::RepeatedField<super::raft_cmdpb::Request> {
        &mut self.requests
    }

    // Take field
    pub fn take_requests(&mut self) -> ::protobuf::RepeatedField<super::raft_cmdpb::Request> {
        ::std::mem::replace(&mut self.requests, ::protobuf::RepeatedField::new())
    }

    pub fn get_requests(&self) -> &[super::raft_cmdpb::Request] {
        &self.requests
    }

    // .raft_cmdpb.AdminRequest admin_request = 3;

    pub fn clear_admin_request(&mut self) {
        self.admin_request.clear();
    }

    pub fn has_admin_request(&self) -> bool {
        self.admin_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_admin_request(&mut self, v: super::raft_cmdpb::AdminRequest) {
        self.admin_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_request(&mut self) -> &mut super::raft_cmdpb::AdminRequest {
        if self.admin_request.is_none() {
            self.admin_request.set_default();
        }
        self.admin_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_admin_request(&mut self) -> super::raft_cmdpb::AdminRequest {
        self.admin_request.take().unwrap_or_else(|| super::raft_cmdpb::AdminRequest::new())
    }

    pub fn get_admin_request(&self) -> &super::raft_cmdpb::AdminRequest {
        self.admin_request.as_ref().unwrap_or_else(|| super::raft_cmdpb::AdminRequest::default_instance())
    }

    // .raft_cmdpb.AdminResponse admin_response = 4;

    pub fn clear_admin_response(&mut self) {
        self.admin_response.clear();
    }

    pub fn has_admin_response(&self) -> bool {
        self.admin_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_admin_response(&mut self, v: super::raft_cmdpb::AdminResponse) {
        self.admin_response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_response(&mut self) -> &mut super::raft_cmdpb::AdminResponse {
        if self.admin_response.is_none() {
            self.admin_response.set_default();
        }
        self.admin_response.as_mut().unwrap()
    }

    // Take field
    pub fn take_admin_response(&mut self) -> super::raft_cmdpb::AdminResponse {
        self.admin_response.take().unwrap_or_else(|| super::raft_cmdpb::AdminResponse::new())
    }

    pub fn get_admin_response(&self) -> &super::raft_cmdpb::AdminResponse {
        self.admin_response.as_ref().unwrap_or_else(|| super::raft_cmdpb::AdminResponse::default_instance())
    }
}

impl ::protobuf::Message for CommandRequet {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.requests {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.admin_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.admin_response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requests)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.admin_request)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.admin_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.admin_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.admin_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.requests {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.admin_request.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.admin_response.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandRequet {
        CommandRequet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommandRequetHeader>>(
                    "header",
                    |m: &CommandRequet| { &m.header },
                    |m: &mut CommandRequet| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_cmdpb::Request>>(
                    "requests",
                    |m: &CommandRequet| { &m.requests },
                    |m: &mut CommandRequet| { &mut m.requests },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_cmdpb::AdminRequest>>(
                    "admin_request",
                    |m: &CommandRequet| { &m.admin_request },
                    |m: &mut CommandRequet| { &mut m.admin_request },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_cmdpb::AdminResponse>>(
                    "admin_response",
                    |m: &CommandRequet| { &m.admin_response },
                    |m: &mut CommandRequet| { &mut m.admin_response },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandRequet>(
                    "CommandRequet",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandRequet {
        static mut instance: ::protobuf::lazy::Lazy<CommandRequet> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandRequet,
        };
        unsafe {
            instance.get(CommandRequet::new)
        }
    }
}

impl ::protobuf::Clear for CommandRequet {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_requests();
        self.clear_admin_request();
        self.clear_admin_response();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommandRequet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandRequet {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseHeader {
    // message fields
    pub region_id: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ResponseHeader {
    pub fn new() -> ResponseHeader {
        ::std::default::Default::default()
    }

    // uint64 region_id = 1;

    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }
}

impl ::protobuf::Message for ResponseHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.region_id != 0 {
            os.write_uint64(1, self.region_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseHeader {
        ResponseHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "region_id",
                    |m: &ResponseHeader| { &m.region_id },
                    |m: &mut ResponseHeader| { &mut m.region_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResponseHeader>(
                    "ResponseHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResponseHeader {
        static mut instance: ::protobuf::lazy::Lazy<ResponseHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResponseHeader,
        };
        unsafe {
            instance.get(ResponseHeader::new)
        }
    }
}

impl ::protobuf::Clear for ResponseHeader {
    fn clear(&mut self) {
        self.clear_region_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandResponse {
    // message fields
    pub header: ::protobuf::SingularPtrField<ResponseHeader>,
    pub apply_state: ::protobuf::SingularPtrField<super::raft_serverpb::RaftApplyState>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandResponse {
    pub fn new() -> CommandResponse {
        ::std::default::Default::default()
    }

    // .enginepb.ResponseHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ResponseHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ResponseHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> ResponseHeader {
        self.header.take().unwrap_or_else(|| ResponseHeader::new())
    }

    pub fn get_header(&self) -> &ResponseHeader {
        self.header.as_ref().unwrap_or_else(|| ResponseHeader::default_instance())
    }

    // .raft_serverpb.RaftApplyState apply_state = 2;

    pub fn clear_apply_state(&mut self) {
        self.apply_state.clear();
    }

    pub fn has_apply_state(&self) -> bool {
        self.apply_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apply_state(&mut self, v: super::raft_serverpb::RaftApplyState) {
        self.apply_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apply_state(&mut self) -> &mut super::raft_serverpb::RaftApplyState {
        if self.apply_state.is_none() {
            self.apply_state.set_default();
        }
        self.apply_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_apply_state(&mut self) -> super::raft_serverpb::RaftApplyState {
        self.apply_state.take().unwrap_or_else(|| super::raft_serverpb::RaftApplyState::new())
    }

    pub fn get_apply_state(&self) -> &super::raft_serverpb::RaftApplyState {
        self.apply_state.as_ref().unwrap_or_else(|| super::raft_serverpb::RaftApplyState::default_instance())
    }
}

impl ::protobuf::Message for CommandResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.apply_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.apply_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.apply_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.apply_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandResponse {
        CommandResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResponseHeader>>(
                    "header",
                    |m: &CommandResponse| { &m.header },
                    |m: &mut CommandResponse| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_serverpb::RaftApplyState>>(
                    "apply_state",
                    |m: &CommandResponse| { &m.apply_state },
                    |m: &mut CommandResponse| { &mut m.apply_state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandResponse>(
                    "CommandResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommandResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandResponse,
        };
        unsafe {
            instance.get(CommandResponse::new)
        }
    }
}

impl ::protobuf::Clear for CommandResponse {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_apply_state();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommandResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotData {
    // message fields
    pub cf: ::std::string::String,
    pub checksum: u32,
    pub data: ::protobuf::RepeatedField<super::raft_serverpb::KeyValue>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SnapshotData {
    pub fn new() -> SnapshotData {
        ::std::default::Default::default()
    }

    // string cf = 1;

    pub fn clear_cf(&mut self) {
        self.cf.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf(&mut self, v: ::std::string::String) {
        self.cf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf(&mut self) -> &mut ::std::string::String {
        &mut self.cf
    }

    // Take field
    pub fn take_cf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf, ::std::string::String::new())
    }

    pub fn get_cf(&self) -> &str {
        &self.cf
    }

    // uint32 checksum = 2;

    pub fn clear_checksum(&mut self) {
        self.checksum = 0;
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: u32) {
        self.checksum = v;
    }

    pub fn get_checksum(&self) -> u32 {
        self.checksum
    }

    // repeated .raft_serverpb.KeyValue data = 3;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<super::raft_serverpb::KeyValue>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<super::raft_serverpb::KeyValue> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<super::raft_serverpb::KeyValue> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }

    pub fn get_data(&self) -> &[super::raft_serverpb::KeyValue] {
        &self.data
    }
}

impl ::protobuf::Message for SnapshotData {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.checksum = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cf.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cf);
        }
        if self.checksum != 0 {
            my_size += ::protobuf::rt::value_size(2, self.checksum, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cf.is_empty() {
            os.write_string(1, &self.cf)?;
        }
        if self.checksum != 0 {
            os.write_uint32(2, self.checksum)?;
        }
        for v in &self.data {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotData {
        SnapshotData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cf",
                    |m: &SnapshotData| { &m.cf },
                    |m: &mut SnapshotData| { &mut m.cf },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "checksum",
                    |m: &SnapshotData| { &m.checksum },
                    |m: &mut SnapshotData| { &mut m.checksum },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_serverpb::KeyValue>>(
                    "data",
                    |m: &SnapshotData| { &m.data },
                    |m: &mut SnapshotData| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SnapshotData>(
                    "SnapshotData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SnapshotData {
        static mut instance: ::protobuf::lazy::Lazy<SnapshotData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SnapshotData,
        };
        unsafe {
            instance.get(SnapshotData::new)
        }
    }
}

impl ::protobuf::Clear for SnapshotData {
    fn clear(&mut self) {
        self.clear_cf();
        self.clear_checksum();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SnapshotData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotRequest {
    // message oneof groups
    pub chunk: ::std::option::Option<SnapshotRequest_oneof_chunk>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum SnapshotRequest_oneof_chunk {
    region(super::metapb::Region),
    data(SnapshotData),
}

impl SnapshotRequest {
    pub fn new() -> SnapshotRequest {
        ::std::default::Default::default()
    }

    // .metapb.Region region = 1;

    pub fn clear_region(&mut self) {
        self.chunk = ::std::option::Option::None;
    }

    pub fn has_region(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: super::metapb::Region) {
        self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(v))
    }

    // Mutable pointer to the field.
    pub fn mut_region(&mut self) -> &mut super::metapb::Region {
        if let ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(_)) = self.chunk {
        } else {
            self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(super::metapb::Region::new()));
        }
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_region(&mut self) -> super::metapb::Region {
        if self.has_region() {
            match self.chunk.take() {
                ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(v)) => v,
                _ => panic!(),
            }
        } else {
            super::metapb::Region::new()
        }
    }

    pub fn get_region(&self) -> &super::metapb::Region {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(ref v)) => v,
            _ => super::metapb::Region::default_instance(),
        }
    }

    // .enginepb.SnapshotData data = 2;

    pub fn clear_data(&mut self) {
        self.chunk = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: SnapshotData) {
        self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut SnapshotData {
        if let ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(_)) = self.chunk {
        } else {
            self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(SnapshotData::new()));
        }
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_data(&mut self) -> SnapshotData {
        if self.has_data() {
            match self.chunk.take() {
                ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotData::new()
        }
    }

    pub fn get_data(&self) -> &SnapshotData {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(ref v)) => v,
            _ => SnapshotData::default_instance(),
        }
    }
}

impl ::protobuf::Message for SnapshotRequest {
    fn is_initialized(&self) -> bool {
        if let Some(SnapshotRequest_oneof_chunk::region(ref v)) = self.chunk {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SnapshotRequest_oneof_chunk::data(ref v)) = self.chunk {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::region(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.chunk {
            match v {
                &SnapshotRequest_oneof_chunk::region(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SnapshotRequest_oneof_chunk::data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.chunk {
            match v {
                &SnapshotRequest_oneof_chunk::region(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SnapshotRequest_oneof_chunk::data(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotRequest {
        SnapshotRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::metapb::Region>(
                    "region",
                    SnapshotRequest::has_region,
                    SnapshotRequest::get_region,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SnapshotData>(
                    "data",
                    SnapshotRequest::has_data,
                    SnapshotRequest::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SnapshotRequest>(
                    "SnapshotRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SnapshotRequest {
        static mut instance: ::protobuf::lazy::Lazy<SnapshotRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SnapshotRequest,
        };
        unsafe {
            instance.get(SnapshotRequest::new)
        }
    }
}

impl ::protobuf::Clear for SnapshotRequest {
    fn clear(&mut self) {
        self.clear_region();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SnapshotRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotDone {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SnapshotDone {
    pub fn new() -> SnapshotDone {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SnapshotDone {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotDone {
        SnapshotDone::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SnapshotDone>(
                    "SnapshotDone",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SnapshotDone {
        static mut instance: ::protobuf::lazy::Lazy<SnapshotDone> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SnapshotDone,
        };
        unsafe {
            instance.get(SnapshotDone::new)
        }
    }
}

impl ::protobuf::Clear for SnapshotDone {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SnapshotDone {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotDone {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eenginepb.proto\x12\x08enginepb\x1a\x0cmetapb.proto\x1a\x10raft_cmd\
    pb.proto\x1a\x13raft_serverpb.proto\"M\n\x13CommandRequetHeader\x12\x1b\
    \n\tregion_id\x18\x01\x20\x01(\x04R\x08regionId\x12\x19\n\x08sync_log\
    \x18\x02\x20\x01(\x08R\x07syncLog\"\xf8\x01\n\rCommandRequet\x125\n\x06h\
    eader\x18\x01\x20\x01(\x0b2\x1d.enginepb.CommandRequetHeaderR\x06header\
    \x12/\n\x08requests\x18\x02\x20\x03(\x0b2\x13.raft_cmdpb.RequestR\x08req\
    uests\x12=\n\radmin_request\x18\x03\x20\x01(\x0b2\x18.raft_cmdpb.AdminRe\
    questR\x0cadminRequest\x12@\n\x0eadmin_response\x18\x04\x20\x01(\x0b2\
    \x19.raft_cmdpb.AdminResponseR\radminResponse\"-\n\x0eResponseHeader\x12\
    \x1b\n\tregion_id\x18\x01\x20\x01(\x04R\x08regionId\"\x83\x01\n\x0fComma\
    ndResponse\x120\n\x06header\x18\x01\x20\x01(\x0b2\x18.enginepb.ResponseH\
    eaderR\x06header\x12>\n\x0bapply_state\x18\x02\x20\x01(\x0b2\x1d.raft_se\
    rverpb.RaftApplyStateR\napplyState\"g\n\x0cSnapshotData\x12\x0e\n\x02cf\
    \x18\x01\x20\x01(\tR\x02cf\x12\x1a\n\x08checksum\x18\x02\x20\x01(\rR\x08\
    checksum\x12+\n\x04data\x18\x03\x20\x03(\x0b2\x17.raft_serverpb.KeyValue\
    R\x04data\"r\n\x0fSnapshotRequest\x12(\n\x06region\x18\x01\x20\x01(\x0b2\
    \x0e.metapb.RegionH\0R\x06region\x12,\n\x04data\x18\x02\x20\x01(\x0b2\
    \x16.enginepb.SnapshotDataH\0R\x04dataB\x07\n\x05chunk\"\x0e\n\x0cSnapsh\
    otDone2\x9a\x01\n\x06Engine\x12H\n\x0cApplyCommand\x12\x17.enginepb.Comm\
    andRequet\x1a\x19.enginepb.CommandResponse\"\0(\x010\x01\x12F\n\rApplySn\
    apshot\x12\x19.enginepb.SnapshotRequest\x1a\x16.enginepb.SnapshotDone\"\
    \0(\x01J\xc4\r\n\x06\x12\x04\0\0=\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\x08\x10\n\t\n\x02\x03\0\x12\x03\x03\x07\x15\n\
    \t\n\x02\x03\x01\x12\x03\x04\x07\x19\n\t\n\x02\x03\x02\x12\x03\x05\x07\
    \x1c\n\n\n\x02\x04\0\x12\x04\x07\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x07\x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x04\x19\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x08\x04\x07\x1d\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x08\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x0b\x14\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x08\x17\x18\n,\n\x04\x04\0\x02\x01\x12\x03\x0b\
    \x04\x16\x1a\x1f\x20Flush\x20in-memory\x20data\x20to\x20disk.\n\n\r\n\
    \x05\x04\0\x02\x01\x04\x12\x04\x0b\x04\x08\x19\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x0b\x04\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x11\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x14\x15\n\n\n\x02\x04\x01\x12\
    \x04\x0e\0\x1b\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x15\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x0f\x04#\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0f\
    \x04\x0e\x17\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0f\x04\x17\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x0f\x18\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x0f!\"\nk\n\x04\x04\x01\x02\x01\x12\x03\x15\x04-\x1a\x11\x20kv\
    \x20put\x20/\x20delete\n2K\x20We\x20don't\x20enclose\x20normal\x20reques\
    ts\x20and\x20administrator\x20request\n\x20at\x20same\x20time.\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x04\x12\x03\x15\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x03\x15\r\x1f\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\x20(\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x15+,\n4\n\x04\x04\x01\x02\x02\
    \x12\x03\x18\x04.\x1a'\x20region\x20metadata\x20manipulation\x20command.\
    \n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x18\x04\x15-\n\x0c\n\x05\x04\
    \x01\x02\x02\x06\x12\x03\x18\x04\x1b\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03\x18\x1c)\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x18,-\n3\n\x04\x04\
    \x01\x02\x03\x12\x03\x1a\x040\x1a&\x20region\x20metadata\x20manipulation\
    \x20result.\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x1a\x04\x18.\n\x0c\n\
    \x05\x04\x01\x02\x03\x06\x12\x03\x1a\x04\x1c\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03\x1a\x1d+\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1a./\n\n\
    \n\x02\x04\x02\x12\x04\x1d\0\x1f\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1d\
    \x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1e\x04\x19\n\r\n\x05\x04\x02\
    \x02\0\x04\x12\x04\x1e\x04\x1d\x18\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x1e\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1e\x0b\x14\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x1e\x17\x18\n\n\n\x02\x04\x03\x12\x04!\0%\x01\
    \n\n\n\x03\x04\x03\x01\x12\x03!\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\"\x04\x1e\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\"\x04!\x19\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03\"\x04\x12\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\"\x13\x19\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\"\x1c\x1d\n\x0b\
    \n\x04\x04\x03\x02\x01\x12\x03$\x041\n\r\n\x05\x04\x03\x02\x01\x04\x12\
    \x04$\x04\"\x1e\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03$\x04\x20\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03$!,\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03$/0\n\n\n\x02\x04\x04\x12\x04'\0+\x01\n\n\n\x03\x04\x04\x01\x12\x03'\
    \x08\x14\n\x0b\n\x04\x04\x04\x02\0\x12\x03(\x04\x12\n\r\n\x05\x04\x04\
    \x02\0\x04\x12\x04(\x04'\x16\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03(\x04\
    \n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03(\x0b\r\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03(\x10\x11\n\x0b\n\x04\x04\x04\x02\x01\x12\x03)\x04\x18\n\r\
    \n\x05\x04\x04\x02\x01\x04\x12\x04)\x04(\x12\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03)\x0b\x13\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03)\x16\x17\n\x0b\n\x04\x04\x04\x02\
    \x02\x12\x03*\x04-\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03*\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\x02\x06\x12\x03*\r#\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x03*$(\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03*+,\n\n\n\x02\x04\
    \x05\x12\x04-\06\x01\n\n\n\x03\x04\x05\x01\x12\x03-\x08\x17\n\x0c\n\x04\
    \x04\x05\x08\0\x12\x04.\x045\x05\n\x0c\n\x05\x04\x05\x08\0\x01\x12\x03.\
    \n\x0f\nr\n\x04\x04\x05\x02\0\x12\x031\x08!\x1ae\x20The\x20first\x20mess\
    age\x20for\x20snapshots.\n\x20It\x20contains\x20the\x20latest\x20region\
    \x20information\x20after\x20applied\x20snapshot.\n\n\x0c\n\x05\x04\x05\
    \x02\0\x06\x12\x031\x08\x15\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x031\x16\
    \x1c\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x031\x1f\x20\n2\n\x04\x04\x05\x02\
    \x01\x12\x034\x08\x1e\x1a%\x20Following\x20messages\x20are\x20always\x20\
    data.\n\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x034\x08\x14\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x034\x15\x19\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x034\x1c\x1d\n\t\n\x02\x04\x06\x12\x038\0\x17\n\n\n\x03\x04\x06\x01\x12\
    \x038\x08\x14\n\n\n\x02\x06\0\x12\x04:\0=\x01\n\n\n\x03\x06\0\x01\x12\
    \x03:\x08\x0e\n\x0b\n\x04\x06\0\x02\0\x12\x03;\x04N\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03;\x08\x14\n\x0c\n\x05\x06\0\x02\0\x05\x12\x03;\x15\x1b\
    \n\x0c\n\x05\x06\0\x02\0\x02\x12\x03;\x1c)\n\x0c\n\x05\x06\0\x02\0\x06\
    \x12\x03;4:\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03;;J\n\x0b\n\x04\x06\0\x02\
    \x01\x12\x03<\x04G\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03<\x08\x15\n\x0c\
    \n\x05\x06\0\x02\x01\x05\x12\x03<\x16\x1c\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03<\x1d,\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03<7Cb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
