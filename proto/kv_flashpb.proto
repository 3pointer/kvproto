syntax = "proto3";
package kv_flashpb;

import "metapb.proto";
import "raft_cmdpb.proto";
import "raft_serverpb.proto";

message KvRequestHeader {
    uint64 region_id = 1;

    // Flush in-memory data to disk.
    bool sync_log = 2;
}

message KvRequest {
    KvRequestHeader header = 1;

    // We don't enclose normal requests and administrator request
    // at same time.

    // kv put / delete
    repeated raft_cmdpb.Request requests = 2;

    // region metadata manipulation command.
    raft_cmdpb.AdminRequest admin_request = 3;
    // region metadata manipulation result.
    raft_cmdpb.AdminResponse admin_response = 4;
}

message KvRequestBatch {
    uint64 id = 1;
    repeated KvRequest requests = 2;
}

message KvResponseHeader {
    uint64 region_id = 1;
}

message KvResponse {
    KvResponseHeader header = 1;
}

message KvResponseBatch {
    uint64 id = 1;
    repeated KvResponse responses = 2;
}

// ==========================

message FlashRequestHeader {
    uint64 region_id = 1;
}

message FlashRequest {
    FlashRequestHeader header = 1;

    raft_serverpb.RaftApplyState apply_state = 2;
}

message FlashRequestBatch {
    uint64 id = 1;
    repeated FlashRequest requests = 2;
}

message FlashResponseHeader {
    uint64 region_id = 1;
}

message FlashResponse {
    FlashResponseHeader header = 1;
}

message FlashResponseBatch {
    uint64 id = 1;
    repeated FlashResponse responses = 2;
}

// ================================

message KvSnapshotData {
    string cf = 1;
    uint32 checksum = 2;
    repeated raft_serverpb.KeyValue data = 3;
}

message KvSnapshotRequest {
    KvRequestHeader header = 1;

    oneof chunk {
        // The first message for snapshots.
        metapb.Region region = 2;

        // Following messages are always data.
        KvSnapshotData data = 3;

        // Indicates the end of snapshots.
        raft_serverpb.Done done = 4;
    }
}

message KvSnapshotResponse {
    KvResponseHeader header = 1;
}
